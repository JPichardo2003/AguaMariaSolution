@page "/Reviews";
@page "/Reviews/{ReviewId:int}";
@inject HttpClient httpClient
@inject NotificationService notificationService;

<EditForm Model="reviews" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header d-flex align-items-center">
            <img src="AguaMariaLogo.png" class="img-logo" />
            <h1>Reviews</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <label>Cliente Id:</label>
                    <InputNumber @bind-Value="reviews.ClienteId" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => reviews.ClienteId)" />
                </div>
                <div class="col-md-6">
                    <label>Nombre:</label>
                    <InputText @bind-Value="reviews.Nombre" class="form-control"></InputText>
                    <ValidationMessage For="@(() => reviews.Nombre)" />
                </div>
                <div class="col-md-6">
                    <label>Apellido:</label>
                    <InputText @bind-Value="reviews.Apellido" class="form-control"></InputText>
                    <ValidationMessage For="@(() => reviews.Apellido)" />
                </div>
                <div class="col-md-6">
                    <label>Email:</label>
                    <InputText type="email" @bind-Value="reviews.Email" class="form-control"></InputText>
                    <ValidationMessage For="@(() => reviews.Email)" />
                </div>
                <div class="col-md-6">
                    <label>Comentario:</label>
                    <InputText @bind-Value="reviews.Comentario" class="form-control"></InputText>
                    <ValidationMessage For="@(() => reviews.Comentario)" />
                </div>
                <div class="col-md-6">
                    <label>Valoraci&oacute;m:</label>
                    <InputNumber @bind-Value="reviews.Valoración" class="form-control" min="1" max="10"></InputNumber>
                    <ValidationMessage For="@(() => reviews.Valoración)" />
                </div>
                <div class="col-md-6">
                    <label>Fecha:</label>
                    <InputDate @bind-Value="reviews.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => reviews.Fecha)" />
                </div>
            </div>
        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
            <button class="btn btn-success">Guardar <i class="oi oi-document" /></button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
        </div>
    </div>
</EditForm>


@code
{
    [Parameter]

    public int ReviewId { get; set; }

    public Reviews reviews { get; set; } = new Reviews();
    public Clientes clientes { get; set; } = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        if (ReviewId > 0)
        {
            this.reviews.ReviewId = ReviewId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var clienteIdEncontrado = (await httpClient.GetFromJsonAsync<List<Reviews>>($"api/Reviews"))!
        .ToList()
        .Any(c => c.ReviewId == reviews.ReviewId);
        if (clienteIdEncontrado)
        {
            var clienteEncontrado = await httpClient.GetFromJsonAsync<Reviews>($"api/Reviews/{reviews.ReviewId}");
            if (clienteEncontrado != null)
            {
                this.reviews = clienteEncontrado;
                StateHasChanged();
            }
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se encontro ningun cliente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Reviews", reviews);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No es posible Guardar",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var clienteDevuelto = await response.Content.ReadFromJsonAsync<Reviews>();
        if (clienteDevuelto is not null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Validacion",
                    Detail = "cliente Guardado Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            reviews = clienteDevuelto;
            this.Nuevo();
            StateHasChanged();
        }
    }

    public void Nuevo()
    {
        this.reviews = new Reviews();
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Reviews/{reviews.ReviewId}");
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No es posible Eliminar",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Validacion",
                    Detail = "cliente Eliminado Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);

        }
        Nuevo();
    }
}
