@page "/Consultar/EntidadesMuestreoAgua"
@inject HttpClient httpClient
@inject NotificationService notificacionService
@attribute [Authorize(Roles = "Administrador,Empleado")]
<PageTitle>Consulta Entidades del Muestreo del Agua</PageTitle>

<fieldset class="border-secondary border border-1">
    <div class="card-body row">
        <div class="row">
            <h5 class="text-center">Entidad</h5>
            <div class="col-md-6">
                <label>Filtrar por ID:</label>
                <InputNumber @bind-Value="FiltroID" class="form-control"></InputNumber>
            </div>
            <div class="col-md-6">
                <label>Filtrar por Descripción:</label>
                <InputText @bind-Value="Descripción" class="form-control"></InputText>
            </div>
            <div class="row">
                <button type="button" class="btn btn-outline-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
            </div>
        </div>
    </div>
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Entidad Id</th>
                        <th>Descripci&oacute;n</th>
                        <th>Ver Entidad</th>
                        <AuthorizeView Roles="Administrador" Context="Admin">
                            <Authorized>
                                 <th>Editar Entidad</th>
                            </Authorized>
                        </AuthorizeView>
                        
                    </tr>
                </thead>
                <tbody>
                    @if (ListaEntidades.Count != 0)
                    {
                        @foreach (var Entidad in ListaEntidades)
                        {
                            <tr>
                                <td>@Entidad.EntidadesMuestreoAguaId</td>
                                <td>@Entidad.Descripción</td>
                                <td><button @onclick=@(() => Ver(Entidad)) 
                                            style="border: none; background: none; padding: 0; margin: 0; cursor: pointer;">
                                            <i class="oi oi-eye" style="color:forestgreen"></i></button></td>
                                <AuthorizeView Roles="Administrador" Context="Admin">
                                     <Authorized>
                                       <td><a href="Registros/EntidadesMuestreoAgua/@Entidad.EntidadesMuestreoAguaId"><i class="oi oi-eye"></i></a></td>
                                    </Authorized>
                                </AuthorizeView>
                               
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
</fieldset>
@if (Entidad != null && Entidad.EntidadesMuestreoAguaId != 0)
{
    <hr />
    <div class="card card-body">
        <br />
        <h1 class="text-center  card card-body ">Entidad de Muestreo de Agua</h1>
    <div class="row  text-center ">
        <div class="col-md-6">
            <h4 class="card  ">Entidad Id: @Entidad.EntidadesMuestreoAguaId</h4>
        </div>
        <div class="col-md-6">
            <h4 class=" card  ">Descripci&oacute;n: @Entidad.Descripción</h4>
        </div>
    </div>
</div>

@*Detalles:*@
<fieldset class="border-secondary border border-1">
    <div class="card card-header">
        <h3 class="text-center">Par&aacute;metro</h3
    <table class='table table-responsive table-striped'>
        <thead>
            <tr>
                <th>Par&aacute;metro Id</th>
                <th>Par&aacute;metro</th>
                <th>M&iacute;nimo</th>
                <th>M&aacute;ximo</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var detalle in Entidad.ListaParametros)
            {
                <tr>
                    <td>@detalle.ParametroId</td>
                    <td>@ObtenerDescripciónParámetro(detalle.ParametroId)</td>
                    <td>@ObtenerMínimo(detalle.ParametroId)</td>
                    <td>@ObtenerMáximo(detalle.ParametroId)</td>
                </tr>
            }
        </tbody>
    </table>
        </div>

</fieldset>
}



@code {

    public EntidadesMuestreoAguas Entidad { get; set; } = new EntidadesMuestreoAguas();
    public List<EntidadesMuestreoAguas> ListaEntidades { get; set; } = new List<EntidadesMuestreoAguas>();
    public List<Parametros> ListaParametros { get; set; } = new List<Parametros>();
    public int FiltroID { get; set; }
    public string Descripción { get; set; } = "";
    public bool PrimeraEntrada { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await Buscar();
        PrimeraEntrada = false;
    }


   public string ObtenerDescripciónParámetro(int Id)
    {
        return ListaParametros.Where(p => p.ParametroId == Id).FirstOrDefault()!.Descripción!;
    }

    public float ObtenerMínimo(int Id)
    {
        return ListaParametros.Where(p => p.ParametroId == Id).FirstOrDefault()!.Mínimo;
    }

    public float ObtenerMáximo(int Id)
    {
        return ListaParametros.Where(p => p.ParametroId == Id).FirstOrDefault()!.Máximo;
    }

    public async Task Buscar()
    {

        List<Parametros> ListaParametrosCompleta = new List<Parametros>();
        List<EntidadesMuestreoAguas> ListaValoresReferencialesCompleta = new List<EntidadesMuestreoAguas>();

        try
        {
            ListaParametrosCompleta = await httpClient.GetFromJsonAsync<List<Parametros>>("api/Parametros");
            ListaValoresReferencialesCompleta = await httpClient.GetFromJsonAsync<List<EntidadesMuestreoAguas>>("api/EntidadesMuestreoAguas");
        }
        catch
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado.",
                    Detail = "No se encontraron valores Referenciales o parametros.",
                    Duration = 4000
                };
            notificacionService.Notify(mensaje);
            return;
        }

        if (PrimeraEntrada)
        {
            ListaParametros = new List<Parametros>(ListaParametrosCompleta);
            ListaEntidades = new List<EntidadesMuestreoAguas>(ListaValoresReferencialesCompleta);
            return;
        }

        ListaEntidades = ListaValoresReferencialesCompleta.Where(p => (FiltroID == 0 || p.EntidadesMuestreoAguaId == FiltroID)
                                                                        && (string.IsNullOrEmpty(Descripción)
                                                                        || (p.Descripción != null && p.Descripción.ToLower().Contains(Descripción.ToLower()))))
                                                                        .ToList();

        StateHasChanged();
    }

    public async Task Ver(EntidadesMuestreoAguas Entidad)
    {
        this.Entidad = Entidad; 
    }

}
