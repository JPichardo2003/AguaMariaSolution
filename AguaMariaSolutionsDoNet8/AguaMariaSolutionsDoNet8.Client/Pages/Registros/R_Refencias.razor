@page "/Registros/Referencias"
@page "/Registros/Referencias/{ReferenciaId:int}"
@inject HttpClient httpClient
@inject NotificationService notificationService
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveAuto
<RadzenNotification />
<PageTitle>Registro de Referencias</PageTitle>

<EditForm Model="referencia" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header d-flex align-items-center">
            <img src="AguaMariaLogo.png" class="img-logo" />
            <h1>Registro de Referencias</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Referencia Id</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="referencia.ReferenciaId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="bi bi-search" /></button>
                    </div>
                </div>
                <div class="col-md-6">
                    <label>Parametro:</label>
                    <InputSelect @bind-Value="referencia.ParametroId" class="form-control">
                        <option value="-1" hidden selected>Seleccione</option>
                        @foreach (var p in ListaParametros)
                        {
                            <option value="@p.ParametroId">@p.ParametroId @p.Descripción</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label>Descripci&oacute;n:</label>
                    <InputText @bind-Value="referencia.Descripción" class="form-control"></InputText>
                    <ValidationMessage For="@(() => referencia.Descripción)" />
                </div>
            </div>
        </div>

        @*Campos:*@

        <fieldset class="border-secondary border border-1">
            <h3 class="text-center">Buscar Referencias</h3>
            <br />
            <div class="card-header row">
                <div class="row">

                    <div class="col-md-6">
                        <label>Filtrar por ID:</label>
                        <InputNumber @bind-Value="FiltroVR" class="form-control"></InputNumber>
                    </div>
                    <div class="col-md-6">
                        <label>Filtrar por Descripción:</label>
                        <InputText @bind-Value="DescripciónVR" class="form-control"></InputText>
                    </div>
                    <br />
                    <br />
                    <br />
                    <div class="row">
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="BuscarValoresRef"></button>
                    </div>
                </div>
            </div>

            @if (ListaReferencia is not null)
            {
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Referencia Id</th>
                                <th>Parametro Id</th>
                                <th>Descripci&oacute;n</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var Referencias in ListaReferencia)
                            {
                                <tr>
                                    <td>@Referencias.ReferenciaId</td>
                                    <td>@Referencias.ParametroId</td>
                                    <td>@Referencias.Descripción</td>
                                    <td><button type="button" class="btn btn-outline-success bi bi-plus-lg" @onclick=@(() => ElegirReferencia(Referencias))></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </fieldset>

        <fieldset class="border-secondary border border-1">
            <h3 class="text-center">Buscar Par&aacute;metro</h3>
            <div class="card-header row">
                <div class="row">

                    <div class="col-md-6">
                        <label>Filtrar por ID:</label>
                        <InputNumber @bind-Value="FiltroP" class="form-control"></InputNumber>
                    </div>
                    <div class="col-md-6">
                        <label>Filtrar por Descripción:</label>
                        <InputText @bind-Value="DescripciónP" class="form-control"></InputText>
                    </div>
                    <br />
                    <br />
                    <br />
                    <div class="row">
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="BuscarParametros"></button>
                    </div>
                </div>
            </div>

            @if (ListaParametros is not null)
            {
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Par&aacute;metro Id</th>
                                <th>Descripci&oacute;n</th>
                                <th>M&iacute;nimo</th>
                                <th>M&aacute;ximo</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var parametros in ListaParametros)
                            {
                                <tr>
                                    <td>@parametros.ParametroId</td>
                                    <td>@parametros.Descripción</td>
                                    <td>@parametros.Mínimo</td>
                                    <td>@parametros.Máximo</td>
                                    <td><button type="button" class="btn btn-outline-success bi bi-plus-lg" @onclick=@(() => ElegirParametro(parametros))></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </fieldset>

        <div class="card-footer text-center">
            <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="bi bi-file-earmark-diff-fill" /></button>
            <button class="btn btn-success">Guardar <i class="bi bi-floppy-fill" /></button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="bi bi-trash-fill" /></button>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int ReferenciaId { get; set; }

    public Referencias referencia { get; set; } = new Referencias();
    public List<Referencias> ListaReferencia { get; set; } = new List<Referencias>();
    public List<Parametros> ListaParametros { get; set; } = new List<Parametros>();

    public int FiltroVR { get; set; }
    public string DescripciónVR { get; set; } = "";
    public int FiltroP { get; set; }
    public string DescripciónP { get; set; } = "";
    public List<Parametros>? Parametros { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await BuscarValoresRef();
        await BuscarParametros();
        if (ReferenciaId > 0)
        {
            this.referencia.ReferenciaId = ReferenciaId;
            await Buscar();
        }

    }

    public async void Nuevo()
    {
        this.referencia = new Referencias();
        await BuscarParametros();
        await BuscarValoresRef();

    }

    public string ObtenerDescripciónParámetro(int Id)
    {
        return ListaParametros.Where(p => p.ParametroId == Id).FirstOrDefault()!.Descripción!;
    }


    public async Task Buscar()
    {
        try
        {
            await httpClient.GetFromJsonAsync<Referencias>($"api/Referencias/{referencia.ReferenciaId}");
        }
        catch
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado.",
                    Detail = "No se encontró una referencia con el criterio que estás buscando.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
            return;
        }

        var EntidadesMuestreoAguaEncontrada = await httpClient.GetFromJsonAsync<Referencias>($"api/Referencias/{referencia.ReferenciaId}");
        if (EntidadesMuestreoAguaEncontrada != null)
        {
            this.referencia = EntidadesMuestreoAguaEncontrada;
            StateHasChanged();
        }
    }

    public async Task Guardar()
    {
        if (!ValidarGuardar())
        {
            return;
        }
        using var response = await httpClient.PostAsJsonAsync("api/Referencias", referencia);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se pudo guardar correctamente, verifique los campos.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var EntidadesDevuelta = await response.Content.ReadFromJsonAsync<Referencias>();
        if (EntidadesDevuelta is not null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado exitosamente",
                    Detail = "Su registro ha sido guardada con éxito.",
                    Duration = 4000
                };

            notificationService.Notify(mensaje);
            StateHasChanged();
            this.Nuevo();
        }
    }

    public bool ValidarGuardar()
    {
        if (referencia.ParametroId == -1)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se puede guardar un registro sin parametro.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        if (string.IsNullOrEmpty(referencia.Descripción) && string.IsNullOrWhiteSpace(referencia.Descripción))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se puede guardar un registro sin parametro.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        referencia.Descripción = referencia.Descripción.Trim();
        return true;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Referencias/{referencia.ReferenciaId}");
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se logro eliminar el registro. Error: " ?? response.ReasonPhrase,
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Registro eliminado",
                    Detail = "Se ha eliminado Correctamente.",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            await BuscarValoresRef();
        }
        Nuevo();
    }

    public async Task BuscarValoresRef()
    {
        try
        {
            await httpClient.GetFromJsonAsync<List<Referencias>>($"api/Referencias");
        }
        catch
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado.",
                    Detail = "No se encontró un referencia con el criterio que estás buscando.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
            return;
        }

        ListaReferencia = ListaReferencia.Where(p => (FiltroVR == 0 || p.ReferenciaId == FiltroVR) &&
                                         (string.IsNullOrEmpty(DescripciónVR) || (p.Descripción != null && p.Descripción
                                                                                                        .ToLower()
                                                                                                        .Contains(DescripciónVR.ToLower()))))
                                                                                                        .ToList();

        var ParametrosEncontrado = await httpClient.GetFromJsonAsync<List<Referencias>>($"api/Referencias");
        if (ParametrosEncontrado != null)
        {
            this.ListaReferencia = ParametrosEncontrado;
            StateHasChanged();
        }
    }

    public async Task BuscarParametros()
    {
        try
        {
            await httpClient.GetFromJsonAsync<List<Parametros>>($"api/Parametros");
        }
        catch
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado.",
                    Detail = "No se encontró un parámetro con el criterio que estás buscando.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
            return;
        }


        ListaParametros = ListaParametros.Where(p => (FiltroP == 0 || p.ParametroId == FiltroP) &&
                                         (string.IsNullOrEmpty(DescripciónP) || (p.Descripción != null && p.Descripción
                                                                                                        .ToLower()
                                                                                                        .Contains(DescripciónP.ToLower()))))
                                                                                                        .ToList();

        var ParametrosEncontrado = await httpClient.GetFromJsonAsync<List<Parametros>>($"api/Parametros");
        if (ParametrosEncontrado != null)
        {
            this.ListaParametros = ParametrosEncontrado;
            StateHasChanged();
        }
    }

    public void ElegirReferencia(Referencias Referencia)
    {
        if (Referencia is null)
        {
            return;
        }
        Nuevo();
        this.referencia = Referencia;

        StateHasChanged();
    }

    public void ElegirParametro(Parametros parametros)
    {
        if (parametros is null)
        {
            return;
        }
        this.referencia.ParametroId = parametros.ParametroId;
        StateHasChanged();
    }

}
